<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>development on yt project blog</title><link>https://yt-project.github.io/blog/categories/development/</link><description>Recent content in development on yt project blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 01 Sep 2022 09:00:00 -0600</lastBuildDate><atom:link href="https://yt-project.github.io/blog/categories/development/index.xml" rel="self" type="application/rss+xml"/><item><title>New in 4.1: Loading data with functions</title><link>https://yt-project.github.io/blog/posts/new-in-41-loading-data-with-functions/</link><pubDate>Thu, 01 Sep 2022 09:00:00 -0600</pubDate><guid>https://yt-project.github.io/blog/posts/new-in-41-loading-data-with-functions/</guid><description>There&amp;rsquo;s a new feature in yt 4.1 that lets you load data using just functions, without it needing to be in memory or to have its own frontend defined.
Back in the long, long distant past, the Stream frontend was created to make it easy to bring data into yt without writing a full-on &amp;ldquo;frontend.&amp;rdquo; Originally this was to make it easy to share data between VTK and yt &amp;ndash; and it worked!</description></item><item><title>New in 4.1: Loading data with functions</title><link>https://yt-project.github.io/blog/posts/new-in-41-loading-raw-hdf5-files/</link><pubDate>Thu, 01 Sep 2022 09:00:00 -0600</pubDate><guid>https://yt-project.github.io/blog/posts/new-in-41-loading-raw-hdf5-files/</guid><description>Building on our ability to read data using just functions, we can now load data from raw HDF5 files with a minimum of metadata.
I&amp;rsquo;ve heard it said that HDF5 isn&amp;rsquo;t exactly a file-format. Sure, it describes how to write bits down (and does this extremely well and thoroughly), but I have always personally found it to be more immediately useful as a filesystem for data. And, it seems that people who write data to disk find it to be similarly useful &amp;ndash; but there&amp;rsquo;s no single way that people organize the data they use HDF5 to write to disk, attempts at metadata notwithstanding.</description></item><item><title>My semester working on yt-idv through NCSA SPIN</title><link>https://yt-project.github.io/blog/posts/yt_idv_spin/</link><pubDate>Thu, 27 Jan 2022 11:32:15 -0600</pubDate><guid>https://yt-project.github.io/blog/posts/yt_idv_spin/</guid><description>&lt;p>A brief overview of my contributions to yt-idv this past semester.&lt;/p></description></item><item><title>Dask and yt: a pre-YTEP</title><link>https://yt-project.github.io/blog/posts/dask_yt_pytep/</link><pubDate>Wed, 27 Jan 2021 10:15:14 -0600</pubDate><guid>https://yt-project.github.io/blog/posts/dask_yt_pytep/</guid><description>&lt;p>An update and proposal on continuing development of Dask and yt.&lt;/p></description></item><item><title>Much Ado About Governance</title><link>https://yt-project.github.io/blog/posts/governance/</link><pubDate>Fri, 10 Oct 2014 16:19:10 -0600</pubDate><guid>https://yt-project.github.io/blog/posts/governance/</guid><description>&lt;p>A new post about our project&amp;rsquo;s governance!&lt;/p></description></item><item><title>Relicensing yt from GPLv3 to BSD</title><link>https://yt-project.github.io/blog/posts/relicensing/</link><pubDate>Thu, 12 Sep 2013 16:36:29 -0600</pubDate><guid>https://yt-project.github.io/blog/posts/relicensing/</guid><description>&lt;p>Our reasoning for switching licenses for the yt-project&lt;/p></description></item><item><title>The first yt development workshop!</title><link>https://yt-project.github.io/blog/posts/devworkshop2013/</link><pubDate>Mon, 18 Mar 2013 17:04:06 -0600</pubDate><guid>https://yt-project.github.io/blog/posts/devworkshop2013/</guid><description>&lt;p>On March 6-8, 2013 we held a yt development workshop at UCSC. Let&amp;rsquo;s talk about
it!&lt;/p></description></item><item><title>yt 2.5 released!</title><link>https://yt-project.github.io/blog/posts/yt-25/</link><pubDate>Sat, 02 Mar 2013 16:46:16 -0600</pubDate><guid>https://yt-project.github.io/blog/posts/yt-25/</guid><description>&lt;p>Announcing yt 2.5!&lt;/p></description></item><item><title>Announcing the 2013 yt development workshop</title><link>https://yt-project.github.io/blog/posts/devworkshopannounce2013/</link><pubDate>Sun, 13 Jan 2013 13:24:33 -0600</pubDate><guid>https://yt-project.github.io/blog/posts/devworkshopannounce2013/</guid><description>&lt;p>Announcing the 2013 yt developer workshop!&lt;/p></description></item><item><title>2012 In Review</title><link>https://yt-project.github.io/blog/posts/2012-review/</link><pubDate>Mon, 31 Dec 2012 13:34:06 -0600</pubDate><guid>https://yt-project.github.io/blog/posts/2012-review/</guid><description>&lt;p>What was 2012 like for the yt community? Let&amp;rsquo;s look back together!&lt;/p></description></item><item><title>What's up with yt 3.0?</title><link>https://yt-project.github.io/blog/posts/whats_up_with_30/</link><pubDate>Thu, 15 Nov 2012 21:05:33 -0600</pubDate><guid>https://yt-project.github.io/blog/posts/whats_up_with_30/</guid><description>This is a long blog post! The short of it is:
If you&amp;rsquo;re using Enzo or FLASH, you can probably do most of what you want to do with 3.0. But there are probably bugs, and you can&amp;rsquo;t volume render yet. But every bug or missing feature you find is a useful piece of information that can help speed up development. If you&amp;rsquo;re using RAMSES, 3.0 will be a vast improvement!</description></item><item><title>yt 2.4 released!</title><link>https://yt-project.github.io/blog/posts/post_43_yt-2-4-released/</link><pubDate>Fri, 03 Aug 2012 02:43:40 +0000</pubDate><guid>https://yt-project.github.io/blog/posts/post_43_yt-2-4-released/</guid><description>We’re proud to announce the release of version 2.4 of the yt Project, http://yt-project.org/ . The new version includes many new features, refinements of existing features and numerous bugfixes. We encourage all users to upgrade to take advantage of the changes.
yt is a community-developed analysis and visualization toolkit, primarily directed at astrophysical hydrodynamics simulations. It provides full support for output from the Enzo, FLASH, Orion, and Nyx codes, with preliminary support for several others.</description></item><item><title>What's new with yt?</title><link>https://yt-project.github.io/blog/posts/post_41_what-s-new-with-yt/</link><pubDate>Mon, 13 Feb 2012 03:10:21 +0000</pubDate><guid>https://yt-project.github.io/blog/posts/post_41_what-s-new-with-yt/</guid><description>Now that the post-workshop preparations and work have settled down, I thought it might be interesting to share some of the developments going on with yt. We&amp;rsquo;re still a long way from a new release, so these interim &amp;lsquo;development&amp;rsquo; updates are meant to be a bit of a teaser. As always, these features are either in the main branch or (if noted) in a public fork on BitBucket. If they sound interesting, drop us a line on `yt-dev &amp;lt;http://lists.</description></item><item><title>yt Version 2.3 Announcement</title><link>https://yt-project.github.io/blog/posts/post_38_yt-version-2-3-announcement/</link><pubDate>Thu, 15 Dec 2011 10:44:00 +0000</pubDate><guid>https://yt-project.github.io/blog/posts/post_38_yt-version-2-3-announcement/</guid><description>Just in time for the New Year, we’re happy to announce the release of yt version 2.3! ( http://yt-project.org/ ) The new version includes many new modules and enhancements, and the usual set of bug fixes over the last point release. We encourage all users to upgrade to take advantage of the changes.
yt is a community-developed analysis and visualization toolkit for astrophysical simulation data. yt provides full support for Enzo, Orion, Nyx, and FLASH codes, with preliminary support for the RAMSES code (and a handful of others.</description></item><item><title>yt Testing and Parallelism</title><link>https://yt-project.github.io/blog/posts/post_34_yt-testing-parallelism/</link><pubDate>Mon, 24 Oct 2011 07:14:22 +0000</pubDate><guid>https://yt-project.github.io/blog/posts/post_34_yt-testing-parallelism/</guid><description>A few of us worked this past week on a couple yt projects and made what we think is significant progress. Two of the items we focused on were testing and parallelism.
For testing, we&amp;rsquo;ve broadened the test suite to include many more functions and derived quantities. We now have 548 tests that include (off and on-axis) slices, (off and on- axis) projections, phase distributions, halo finding, volume rendering, and geometrical region cuts such as rectangular solids, spheres, and disks.</description></item><item><title>New Screencasts</title><link>https://yt-project.github.io/blog/posts/post_32_new-screencasts/</link><pubDate>Tue, 27 Sep 2011 12:20:56 +0000</pubDate><guid>https://yt-project.github.io/blog/posts/post_32_new-screencasts/</guid><description>A few of the yt developers have been experimenting with screencasts to show off new features or demonstrate how to do some things. Sam and I have both prepared screencasts on volume rendering and getting started with developing, respectively. Check them out below, and please feel free to leave comments and let us know what you think &amp;ndash; not just about the screencasts, but about what they demonstrate, and if you think any of the concepts or routines could be made easier.</description></item><item><title>Dataset Tracking with yt</title><link>https://yt-project.github.io/blog/posts/post_31_dataset-tracking-with-yt/</link><pubDate>Mon, 12 Sep 2011 10:53:00 +0000</pubDate><guid>https://yt-project.github.io/blog/posts/post_31_dataset-tracking-with-yt/</guid><description>In this post I&amp;rsquo;d like to discuss a bit of work in progress to highlight some exciting new features that we hope to have working in yt sometime soon.
On any machine that runs yt, there is a file created in the users home directory named ~/.yt/parameter_files.csv that yt uses internally to keep track of datasets it has seen. This is just a simple text file containing comma-separated entries with a few pieces of information about datasets, like their location on disk and the last date and time they were &amp;lsquo;seen&amp;rsquo; by yt.</description></item><item><title>Optimizing yt</title><link>https://yt-project.github.io/blog/posts/post_30_optimizing-yt/</link><pubDate>Sat, 10 Sep 2011 08:39:52 +0000</pubDate><guid>https://yt-project.github.io/blog/posts/post_30_optimizing-yt/</guid><description>This last week, following the release of version 2.2 of yt, I spent a bit of time looking at speed improvements. There were several places that the code was unacceptably slow:
1D profiles (as noted in our method paper, even) Ghost-zone generation RAMSES grid data loading The first of these was relatively easy to fix. In the past, 1D profiles (unlike 2D profiles) were calculated using pure-python mechanisms; numpy was used for digitization, then inverse binning was conducted by the numpy &amp;lsquo;where&amp;rsquo; command, and these binnings were used to generate the overall histogram.</description></item><item><title>ParaView and yt</title><link>https://yt-project.github.io/blog/posts/post_23_paraview-and-yt/</link><pubDate>Mon, 13 Jun 2011 20:09:34 +0000</pubDate><guid>https://yt-project.github.io/blog/posts/post_23_paraview-and-yt/</guid><description>Thanks to some awesome work by developers at Kitware, yt can now be called from within ParaView!
This relies on a couple things, all of which are pretty exciting moving forward. The idea behind this is to leverage where the two codes have their own strengths and weaknesses, and identify places where they can work productively together. For instance, yt has been designed to provide astrophysical analysis; in this way, it can generate adaptive projections, spectral energy distributions and so on.</description></item><item><title>yt development - Quad trees, Tickets and more</title><link>https://yt-project.github.io/blog/posts/post_21_yt-development-quad-trees-tickets-and-more/</link><pubDate>Thu, 02 Jun 2011 20:20:00 +0000</pubDate><guid>https://yt-project.github.io/blog/posts/post_21_yt-development-quad-trees-tickets-and-more/</guid><description>It&amp;rsquo;s been a while since the last Development post — but in that time, some pretty fun things have been going on. These are some of the smaller things, but there are bigger things in store which I&amp;rsquo;ll write about next time.
QuadTree Projections For a while, there has been the option to use a QuadTree data structure to conduct projections through a simulation volume. This was accessible through the quad_proj attribute, which respected the same interface as the normal proj interface.</description></item><item><title>yt 2.1 Release Announcement</title><link>https://yt-project.github.io/blog/posts/post_19_yt-2-1-release-announcement/</link><pubDate>Fri, 08 Apr 2011 04:57:00 +0000</pubDate><guid>https://yt-project.github.io/blog/posts/post_19_yt-2-1-release-announcement/</guid><description>We are proud to announce the release of yt version 2.1. This release includes several new features, bug fixes, and numerous improvements to the code base and documentation. At the yt homepage, http://yt.enzotools.org/ , an installation script, a cookbook, documentation and a guide to getting involved can be found.
yt is an analysis and visualization toolkit for Adaptive Mesh Refinement data. yt provides full support for Enzo, Orion, and FLASH codes, with preliminary support for RAMSES, ART, Chombo, CASTRO and MAESTRO codes.</description></item><item><title>yt development - Treecodes, GUIs, IRC and more!</title><link>https://yt-project.github.io/blog/posts/post_18_yt-development-treecodes-guis-irc-and-more/</link><pubDate>Mon, 04 Apr 2011 06:40:54 +0000</pubDate><guid>https://yt-project.github.io/blog/posts/post_18_yt-development-treecodes-guis-irc-and-more/</guid><description>It&amp;rsquo;s been nearly a month since the last yt development post; in that time, there&amp;rsquo;s been quite a bit of development in a couple different areas. This is culminating in a 2.1 release, for which Sam Skillman is release manager, sometime in the next few days.
Streamlines and Treecode SamS has spent some time over the last month developing two types of streamline code. The first integrates a series of streamlines over a selection of the domain, which can then be visualizing using the mplot3d package.</description></item><item><title>yt development - External Analysis and Simulation Code Support</title><link>https://yt-project.github.io/blog/posts/post_17_yt-development-external-analysis-and-simulation-code-support/</link><pubDate>Mon, 07 Mar 2011 06:17:09 +0000</pubDate><guid>https://yt-project.github.io/blog/posts/post_17_yt-development-external-analysis-and-simulation-code-support/</guid><description>This last week was the first full week on BitBucket and so far I think it has been quite successful. The new development process is for most of the core developers to maintain personal forks for experimental changes, or longer term changes, and then to commit directly or merge when bug fixes or features are ready to be integrated. The list of forks is easily visible and each individual fork&amp;rsquo;s divergence from the primary repository can be viewed by clicking on the green arrows.</description></item><item><title>yt development - BitBucket, Task Queues, and Streamlines</title><link>https://yt-project.github.io/blog/posts/post_16_yt-development-bitbucket-task-queues-and-streamlines/</link><pubDate>Mon, 28 Feb 2011 05:35:00 +0000</pubDate><guid>https://yt-project.github.io/blog/posts/post_16_yt-development-bitbucket-task-queues-and-streamlines/</guid><description>The major changes this week came mostly in the form of administrative shifts. However, SamS did some great work I&amp;rsquo;m going to hint at (he&amp;rsquo;ll post a blog entry later) and I started laying the ground work for something I&amp;rsquo;ve been excited about for a while, an MPI-aware task queue.
BitBucket For the last couple months, yt has been struggling under the constraints of the hg server on its hosting plan.</description></item><item><title>yt development - HEALpix and Contour Tree</title><link>https://yt-project.github.io/blog/posts/post_14_yt-development-healpix-and-contour-tree/</link><pubDate>Mon, 21 Feb 2011 04:14:53 +0000</pubDate><guid>https://yt-project.github.io/blog/posts/post_14_yt-development-healpix-and-contour-tree/</guid><description>This week there was not very much yt development. However, a few notes may be of interest. SamS has updated the HEALPix camera to support ordered projections; what this means is that you can now make volume renderings using a standard color transfer function, or even the Planck transfer function, that cover 4pi of the sky. I am still working on integrating a method for creating images easily, but for now the scripts from last week should work.</description></item><item><title>yt development - All-sky column density calculation</title><link>https://yt-project.github.io/blog/posts/post_13_yt-development-all-sky-column-density-calculation/</link><pubDate>Mon, 14 Feb 2011 06:13:00 +0000</pubDate><guid>https://yt-project.github.io/blog/posts/post_13_yt-development-all-sky-column-density-calculation/</guid><description>This week I added the ability to calculate all-sky column densities. This functionality uses HEALpix to calculate equally-area regions on the sky and then shoots out rays from a central source to some fixed radius, accumulating values of a field along the way. Although so far I&amp;rsquo;ve only used it to calculate column densities of &amp;ldquo;Density&amp;rdquo; it could be used for other values as well, including all- sky weighted averages of quantities.</description></item><item><title>yt development - Documentation</title><link>https://yt-project.github.io/blog/posts/post_12_yt-development-documentation/</link><pubDate>Mon, 07 Feb 2011 05:29:00 +0000</pubDate><guid>https://yt-project.github.io/blog/posts/post_12_yt-development-documentation/</guid><description>As a result of progress in my scientific goals, and the application of recent yt developments to them, I did not make many changes or developments in yt this week. When I did work on yt, I primarily spent time re-organizing the documentation and fixing several errors. I have added an &amp;ldquo;installation&amp;rdquo; section, consolidated a few sections, and wrote two new sections on how to make plots and on how to generate derived data products.</description></item><item><title>yt development - Time series, and more</title><link>https://yt-project.github.io/blog/posts/post_11_yt-development-time-series-and-more/</link><pubDate>Mon, 31 Jan 2011 04:53:10 +0000</pubDate><guid>https://yt-project.github.io/blog/posts/post_11_yt-development-time-series-and-more/</guid><description>Not much yt development went on in the last week; I spent some time working with Enzo and driving forward simulation goals, which resulted in some development that directly benefited those simulation goals. However, this fortuitously coincided with work I have been eager to return to for quite some time: namely, time series analysis!
Time Series Analysis The problem with time series analysis in yt has, to this point, been an issue of verbosity and clunkiness.</description></item><item><title>yt development - 2.0, Cython, and physics module wrapping</title><link>https://yt-project.github.io/blog/posts/post_10_yt-development-2-0-cython-and-physics-module-wrapping/</link><pubDate>Mon, 24 Jan 2011 07:10:50 +0000</pubDate><guid>https://yt-project.github.io/blog/posts/post_10_yt-development-2-0-cython-and-physics-module-wrapping/</guid><description>This is the second blog entry in the weekly series, with some updates on what took place last week with respect to yt development. One of the more exciting things is the final one, which is the start of what I want to focus on for the next couple months or years: integration of physics modules with analysis code, and then the ultimate inversion of that relationship.
yt-2.0 This week saw the release of yt 2.</description></item><item><title>yt development - star particle rendering, simple merger trees and documentation</title><link>https://yt-project.github.io/blog/posts/post_09_yt-development-star-particle-rendering-simple-merger-trees-and-documentation/</link><pubDate>Mon, 17 Jan 2011 05:27:00 +0000</pubDate><guid>https://yt-project.github.io/blog/posts/post_09_yt-development-star-particle-rendering-simple-merger-trees-and-documentation/</guid><description>This is the first of a new series of &amp;ldquo;what&amp;rsquo;s up with yt&amp;rdquo; blog posts I&amp;rsquo;m going to be writing. By keeping this log, I hope that maybe some things that would otherwise get lost in the version control changesets will get brought to greater light. This covers the time period of the first couple weeks in January.
Star Particle Rendering On the mailing list, the question of adding star particles to a volume rendering was raised.</description></item></channel></rss>