<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tutorial on yt project blog</title><link>https://yt-project.github.io/yt-blog/categories/tutorial/</link><description>Recent content in tutorial on yt project blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 12 Jan 2021 18:22:25 -0600</lastBuildDate><atom:link href="https://yt-project.github.io/yt-blog/categories/tutorial/index.xml" rel="self" type="application/rss+xml"/><item><title>A yt-napari party</title><link>https://yt-project.github.io/yt-blog/posts/ytnapariparty/</link><pubDate>Tue, 12 Jan 2021 18:22:25 -0600</pubDate><guid>https://yt-project.github.io/yt-blog/posts/ytnapariparty/</guid><description>&lt;p>Interactive visualization of &lt;em>yt&lt;/em> data using &lt;em>napari&lt;/em>?&lt;/p></description></item><item><title>Line Integral Convolution for Vector Field Visualization</title><link>https://yt-project.github.io/yt-blog/posts/line-integral/</link><pubDate>Thu, 20 Aug 2015 14:14:29 -0500</pubDate><guid>https://yt-project.github.io/yt-blog/posts/line-integral/</guid><description>&lt;p>How to visualize a line integral convolution for a vector field with yt&lt;/p></description></item><item><title>Obj File Exporter for Surfaces</title><link>https://yt-project.github.io/yt-blog/posts/objexporter/</link><pubDate>Sat, 30 Mar 2013 16:56:06 -0600</pubDate><guid>https://yt-project.github.io/yt-blog/posts/objexporter/</guid><description>&lt;p>How to export surfaces into an obj file (will it blend?!)&lt;/p></description></item><item><title>Particle Generators</title><link>https://yt-project.github.io/yt-blog/posts/particle-gen/</link><pubDate>Fri, 04 Jan 2013 13:27:46 -0600</pubDate><guid>https://yt-project.github.io/yt-blog/posts/particle-gen/</guid><description>&lt;p>This post shows how to generate particle fields from pre-defined particle
lists, lattice distributions, and distributions based on density fields.&lt;/p></description></item><item><title>3D Surfaces and Sketchfab</title><link>https://yt-project.github.io/yt-blog/posts/sketchfab/</link><pubDate>Wed, 05 Dec 2012 13:37:36 -0600</pubDate><guid>https://yt-project.github.io/yt-blog/posts/sketchfab/</guid><description>&lt;p>Let&amp;rsquo;s talk about exporting surfaces to sketchfab with yt!&lt;/p></description></item><item><title>The Rockstar Halo Finder in yt</title><link>https://yt-project.github.io/yt-blog/posts/rockstar/</link><pubDate>Mon, 26 Nov 2012 20:22:16 -0600</pubDate><guid>https://yt-project.github.io/yt-blog/posts/rockstar/</guid><description>Over the last few weeks, Matt Turk, Christopher Moody, and Stephen Skory have been working to improve the integration of the Rockstar halo finder in yt. Rockstar was written primarily by Peter Behroozi and has a main website here. Linked there is the source and the most current edition of the method paper which includes a timing and scaling study.
Rockstar is a six dimensional halo finder, meaning that it considers both particle position and momentum when locating dark matter halos.</description></item><item><title>Simple Grid Refinement</title><link>https://yt-project.github.io/yt-blog/posts/simple_grid_refinement/</link><pubDate>Tue, 30 Oct 2012 22:16:54 -0600</pubDate><guid>https://yt-project.github.io/yt-blog/posts/simple_grid_refinement/</guid><description>Notebook Download
Grid refinement In yt, you can now generate very simple initial conditions:
In[1]:
from yt.mods import * from yt.frontends.stream.api import load_uniform_grid from yt.frontends.gdf.api import * from yt.utilities.grid_data_format.writer import write_to_gdf class DataModifier(object): pass class TophatSphere(DataModifier): def __init__(self, fields, radius, center): self.fields = fields self.radius = radius self.center = center def apply(self, grid, container): r = ((grid[&amp;#39;x&amp;#39;] - self.center[0])**2.0 + (grid[&amp;#39;y&amp;#39;] - self.center[1])**2.0 + (grid[&amp;#39;z&amp;#39;] - self.center[2])**2.0)**0.5 for field in self.</description></item><item><title>Boolean Data Containers</title><link>https://yt-project.github.io/yt-blog/posts/post_36_boolean-data-containers/</link><pubDate>Wed, 09 Nov 2011 07:03:00 +0000</pubDate><guid>https://yt-project.github.io/yt-blog/posts/post_36_boolean-data-containers/</guid><description>A useful new addition to yt are boolean data containers. These are hybrid data containers that are built by relating already-defined data containers with each other using boolean operators. Nested boolean logic, using parentheses, is also supported. The boolean data container (or volume) is made by constructing a list of volumes interspersed with operators given as strings. Below are some examples of what can be done with boolean data containers.</description></item><item><title>New Screencasts</title><link>https://yt-project.github.io/yt-blog/posts/post_32_new-screencasts/</link><pubDate>Tue, 27 Sep 2011 12:20:56 +0000</pubDate><guid>https://yt-project.github.io/yt-blog/posts/post_32_new-screencasts/</guid><description>A few of the yt developers have been experimenting with screencasts to show off new features or demonstrate how to do some things. Sam and I have both prepared screencasts on volume rendering and getting started with developing, respectively. Check them out below, and please feel free to leave comments and let us know what you think &amp;ndash; not just about the screencasts, but about what they demonstrate, and if you think any of the concepts or routines could be made easier.</description></item></channel></rss>