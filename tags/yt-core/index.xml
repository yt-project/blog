<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>yt-core on yt project blog</title><link>/tags/yt-core/</link><description>Recent content in yt-core on yt project blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 24 Oct 2011 07:14:22 +0000</lastBuildDate><atom:link href="/tags/yt-core/index.xml" rel="self" type="application/rss+xml"/><item><title>yt Testing and Parallelism</title><link>/posts/post_34_yt-testing-parallelism/</link><pubDate>Mon, 24 Oct 2011 07:14:22 +0000</pubDate><guid>/posts/post_34_yt-testing-parallelism/</guid><description>A few of us worked this past week on a couple yt projects and made what we think is significant progress. Two of the items we focused on were testing and parallelism.
For testing, we&amp;rsquo;ve broadened the test suite to include many more functions and derived quantities. We now have 548 tests that include (off and on-axis) slices, (off and on- axis) projections, phase distributions, halo finding, volume rendering, and geometrical region cuts such as rectangular solids, spheres, and disks.</description></item><item><title>Optimizing yt</title><link>/posts/post_30_optimizing-yt/</link><pubDate>Sat, 10 Sep 2011 08:39:52 +0000</pubDate><guid>/posts/post_30_optimizing-yt/</guid><description>This last week, following the release of version 2.2 of yt, I spent a bit of time looking at speed improvements. There were several places that the code was unacceptably slow:
1D profiles (as noted in our method paper, even) Ghost-zone generation RAMSES grid data loading The first of these was relatively easy to fix. In the past, 1D profiles (unlike 2D profiles) were calculated using pure-python mechanisms; numpy was used for digitization, then inverse binning was conducted by the numpy &amp;lsquo;where&amp;rsquo; command, and these binnings were used to generate the overall histogram.</description></item><item><title>yt development - Quad trees, Tickets and more</title><link>/posts/post_21_yt-development-quad-trees-tickets-and-more/</link><pubDate>Thu, 02 Jun 2011 20:20:00 +0000</pubDate><guid>/posts/post_21_yt-development-quad-trees-tickets-and-more/</guid><description>It&amp;rsquo;s been a while since the last Development post â€” but in that time, some pretty fun things have been going on. These are some of the smaller things, but there are bigger things in store which I&amp;rsquo;ll write about next time.
QuadTree Projections For a while, there has been the option to use a QuadTree data structure to conduct projections through a simulation volume. This was accessible through the quad_proj attribute, which respected the same interface as the normal proj interface.</description></item><item><title>yt development - BitBucket, Task Queues, and Streamlines</title><link>/posts/post_16_yt-development-bitbucket-task-queues-and-streamlines/</link><pubDate>Mon, 28 Feb 2011 05:35:00 +0000</pubDate><guid>/posts/post_16_yt-development-bitbucket-task-queues-and-streamlines/</guid><description>The major changes this week came mostly in the form of administrative shifts. However, SamS did some great work I&amp;rsquo;m going to hint at (he&amp;rsquo;ll post a blog entry later) and I started laying the ground work for something I&amp;rsquo;ve been excited about for a while, an MPI-aware task queue.
BitBucket For the last couple months, yt has been struggling under the constraints of the hg server on its hosting plan.</description></item><item><title>yt development - Time series, and more</title><link>/posts/post_11_yt-development-time-series-and-more/</link><pubDate>Mon, 31 Jan 2011 04:53:10 +0000</pubDate><guid>/posts/post_11_yt-development-time-series-and-more/</guid><description>Not much yt development went on in the last week; I spent some time working with Enzo and driving forward simulation goals, which resulted in some development that directly benefited those simulation goals. However, this fortuitously coincided with work I have been eager to return to for quite some time: namely, time series analysis!
Time Series Analysis The problem with time series analysis in yt has, to this point, been an issue of verbosity and clunkiness.</description></item><item><title>yt development - 2.0, Cython, and physics module wrapping</title><link>/posts/post_10_yt-development-2-0-cython-and-physics-module-wrapping/</link><pubDate>Mon, 24 Jan 2011 07:10:50 +0000</pubDate><guid>/posts/post_10_yt-development-2-0-cython-and-physics-module-wrapping/</guid><description>This is the second blog entry in the weekly series, with some updates on what took place last week with respect to yt development. One of the more exciting things is the final one, which is the start of what I want to focus on for the next couple months or years: integration of physics modules with analysis code, and then the ultimate inversion of that relationship.
yt-2.0 This week saw the release of yt 2.</description></item><item><title>yt development - star particle rendering, simple merger trees and documentation</title><link>/posts/post_09_yt-development-star-particle-rendering-simple-merger-trees-and-documentation/</link><pubDate>Mon, 17 Jan 2011 05:27:00 +0000</pubDate><guid>/posts/post_09_yt-development-star-particle-rendering-simple-merger-trees-and-documentation/</guid><description>This is the first of a new series of &amp;ldquo;what&amp;rsquo;s up with yt&amp;rdquo; blog posts I&amp;rsquo;m going to be writing. By keeping this log, I hope that maybe some things that would otherwise get lost in the version control changesets will get brought to greater light. This covers the time period of the first couple weeks in January.
Star Particle Rendering On the mailing list, the question of adding star particles to a volume rendering was raised.</description></item><item><title>AMR kd-Tree rendering added to yt</title><link>/posts/post_08_amr-kd-tree-rendering-added-to-yt/</link><pubDate>Tue, 09 Nov 2010 15:32:03 +0000</pubDate><guid>/posts/post_08_amr-kd-tree-rendering-added-to-yt/</guid><description>After a significant amount of development and restructuring, I have added the AMR kd-Tree rendering framework to yt. There are several posts on this blog about this module already, so I won&amp;rsquo;t go over all the background information again. Here I&amp;rsquo;d like to showcase some of the recent successes and capabilities of the volume rendering within yt.
New optimization options:There are a few important additions that have made it possible to render some of the largest AMR simulations we have available.</description></item><item><title>kD-Tree Rendering Improvements</title><link>/posts/post_06_kd-tree-rendering-improvements/</link><pubDate>Mon, 27 Sep 2010 11:46:00 +0000</pubDate><guid>/posts/post_06_kd-tree-rendering-improvements/</guid><description>Hi all,
Just sharing a video here that showcases some improvements I&amp;rsquo;ve made to the kD-tree rendering that will be making its way to yt for the 2.0 release. You can download it render_movie.3gp|here
Just to be clear this is showing the rendering of a cosmology simulation with a 64^3 root grid + 6 AMR levels in real time on 8 processors. The script is run in parallel, with the root processor displaying the results once each frame is finished.</description></item><item><title>Quad Tree Projections</title><link>/posts/post_04_quad-tree-projections/</link><pubDate>Fri, 10 Sep 2010 21:41:23 +0000</pubDate><guid>/posts/post_04_quad-tree-projections/</guid><description>The current method for projections in yt is based on a home-grown algorithm for calculating grid overlap and joining points. I&amp;rsquo;ve always been pretty proud of it &amp;ndash; it gave good results, and it succeeded at the project-once-make-many-images philosophy that went into its design. Rather than storing a 2D array of pixels, projections and slices in yt store flat arrays of image plane coordinates and cell widths. This means that there&amp;rsquo;s an additional step of pixelization to create an image, but it also means that arbitrary images can be made from a single projection or slice operation.</description></item><item><title>How the Merger Tree Sped Up SQLite Database UPDATEs</title><link>/posts/post_03_how-the-merger-tree-sped-up-sqlite-database-update-s/</link><pubDate>Thu, 09 Sep 2010 13:26:00 +0000</pubDate><guid>/posts/post_03_how-the-merger-tree-sped-up-sqlite-database-update-s/</guid><description>The Parallel Merger Tree in yt, like most of the code in yt, has a rich history of changes and upgrades. One of the most significant upgrades was a change in the way the SQLite database file is updated during the course of building the merger tree. Briefly, the database contains all the information about the merger tree of the halos, as well as the specifics of each halo, such as the mass, position or bulk velocity.</description></item><item><title>Volume Rendering with a kD-Tree Decomposition</title><link>/posts/post_00_volume-rendering-with-a-kd-tree-decomposition/</link><pubDate>Thu, 06 May 2010 06:53:35 +0000</pubDate><guid>/posts/post_00_volume-rendering-with-a-kd-tree-decomposition/</guid><description>&lt;p>Let&amp;rsquo;s talk about the progress we&amp;rsquo;ve made on a kD-Tree decomposition.&lt;/p></description></item></channel></rss>